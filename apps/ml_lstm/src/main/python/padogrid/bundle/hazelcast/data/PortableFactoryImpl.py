"""
Copyright (c) 2023 Netcrest Technologies, LLC. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

"""
PortableFactoryImpl is generated code. To manually modify the code, make sure
to follow the same naming conventions. Otherwise, the code generator may not work.

@generator com.netcrest.pado.tools.hazelcast.VersionedPortableClassGenerator
@date Sun Jul 23 06:02:14 EDT 2023
"""

from padogrid.bundle.hazelcast.data.ForecastValue import ForecastValue
from padogrid.bundle.hazelcast.data.ForexRecord import ForexRecord


class PortableFactoryImpl:
    """
    PortableFactoryImpl provides a dictionary of versioned portable classes generated by
    the Pado code generator. HazelcastClient can be created with the factory dictionary
    returned by this class as follows.
    
    client = hazelcast.HazelcastClient(portable_factories=PortableFactoryImpl.factories())
    
    For multiple factories, pass in the factory dictionary for each PortableFactoryImpl module
    as shown in the following example.
    
    portable_factories = {}
    portable_factories = myportable1.PortableFactoryImpl.factories(portable_factories)
    portable_factories = myportable2.PortableFactoryImpl.factories(portable_factories)
    ...
    client = hazelcast.HazelcastClient(portable_factories=PortableFactoryImpl.factories(portable_factories))
    """

    FACTORY_ID = 30002

    __FIRST_CLASS_ID = 1002
    ForexRecord_CLASS_ID = __FIRST_CLASS_ID
    ForecastValue_CLASS_ID = ForexRecord_CLASS_ID + 1
    __LAST_CLASS_ID = ForecastValue_CLASS_ID
    
    __classes = {ForexRecord_CLASS_ID: ForexRecord, 
                ForecastValue_CLASS_ID: ForecastValue}

    def factories(portable_factories=None):
        """
        Returns a copy of the factory dictionary that contains this portable factory and class definitions.
        The returned dictionary can be safely altered as long as the inner class dictionary is not altered.
        
        Parameters
        ----------
        portable_factories: dictionary
            Optional dictionary that contains other factories. If this argument is not specified,
            then it returns a dictionary with a single entry of this factory.
        """
        
        if portable_factories == None:
            return {PortableFactoryImpl.FACTORY_ID: PortableFactoryImpl.__classes}
        else:
            portable_factories[PortableFactoryImpl.FACTORY_ID] = PortableFactoryImpl.__classes
            return portable_factories